(function(a){var b=a.LimitInput=function(c,d){return new b.fn.init(c,d)};b.fn=b.prototype={init:function(d,e){var c=d.getAttribute("data-maxlength")||10;this.limit(d,c,e);return this},limit:function(d,c,f){var e=this;e.runLimit.call(e,d,c,f);d.addEventListener("keyup",function(){e.runLimit.call(e,d,c,f)});d.addEventListener("focusout",function(){e.runLimit.call(e,d,c,f)});return this},runLimit:function(g,d,c){var j=g.value.trim(),f=this.getLength(j,d),h=f.length;if(f.isExceed){g.value=j.substr(0,h).trim()}if(c){var k=g.parentNode,e=k.querySelector(".batman-input-limit");h=h>d?d:h;if(e){e.innerHTML='<span style="color:#00B4FF">'+h+"</span>&nbsp;/&nbsp;"+d}else{var i=document.createElement("span");i.className="batman-input-limit";i.innerHTML='<span style="color:#00B4FF">'+h+"</span>&nbsp;/&nbsp;"+d;k.appendChild(i)}}},getLength:function(f,d){var c=0;for(var e=0;e<f.length;e++){if(f[e].match(/[^\x00-\xff]/ig)!=null){c+=1}else{c+=0.5}if(c>d){return{length:e,isExceed:true}}}return{length:c,isExceed:false}}};b.fn.init.prototype=b.prototype})(window);

(function (window, undefined) {
    var Batmany_Easytip = window.Batmany_Easytip = function (text, delay, autoClose) {
        return new Batmany_Easytip.fn.init(text, delay, autoClose);
    };

    Batmany_Easytip.fn = Batmany_Easytip.prototype = {
        init : function (text, delay, autoClose) {
            autoClose = autoClose || true;

            var timeId = this.getTimeId();

            this.create(text, delay, timeId, autoClose);
        },
        getTimeId : function () {
            return 'batmany_easy_tip_' + new Date().getSeconds() + new Date().getMilliseconds();
        },
        create : function (text, delay, timeId, autoClose) {

            var easytip = document.getElementById('batmany_easytip');

            if (!easytip) {
                var div = document.createElement('div');
                div.id = 'batmany_easytip';
                document.body.appendChild(div);
                easytip = div;
            }
            easytip.innerHTML = this.getTipHtml(text, timeId);

            this.show(delay, timeId, autoClose);

        },
        getTipHtml : function (text, timeId) {
            return '<div id="' + timeId + '" class="batmany-easy-tip">' + text + '</div>';
        },
        show : function (delay, timeId, autoClose) {
            var tip = document.getElementById(timeId),
                that = this;

            setTimeout(function () {
                tip.className += ' active';
            }, 30);

            delay = delay || 1000;

            if (autoClose) {
                setTimeout(function () {
                    that.destroy(tip);
                }, delay);
            }

            return this;
        },
        destroy : function (tip) {

            if (tip) {
                tip.className = 'batmany-easy-tip';
            }

            return this;
        }
    };

    Batmany_Easytip.fn.init.prototype = Batmany_Easytip.prototype;
})(window);

(function (window, undefined) {

    // 梦想时间构造函数开始
    var DreamDate = window.DreamDate = function ($year, $month, $day, dateArray) {
        return new DreamDate.fn.init($year, $month, $day, dateArray);
    };

    DreamDate.fn = DreamDate.prototype = {
        init: function ($year, $month, $day, dateArray) {
            var now = dateArray ? (new Date(dateArray)) : new Date(),
                thisYears = now.getFullYear(),
                thisMonth = now.getMonth() + 1,
                thisDay = now.getDate(),
                currentYearMonths = '',
                currentMonthDays = '',
                tempArr = [],
                tmp,
                getOption = function (start, end){
                    var optionArr = [];
                    for (var i = start; i <= end; i ++) {
                        tmp = i < 10 ? ('0' + i) : i;
                        optionArr.push('<option value="' + tmp + '">' + tmp + '</option>');
                    }

                    return optionArr;
                },
                getDaysByMonth = function (selectMonth, start) {
                    start = start ? start : 1;
                    if ([1, 3, 5, 7, 8, 10, 12].indexOf(selectMonth) != -1) {
                        //solar month
                        tempArr = getOption(start, 31);
                    } else if ([4, 6, 9, 11].indexOf(selectMonth) != -1) {
                        //lunar month
                        tempArr = getOption(start, 30);
                    } else if (selectMonth == 2) {
                        var selectedYear = $year.find('option:selected'),
                            days = 28;

                        if (selectedYear % 4 == 0) {
                            days = 29;
                        }

                        tempArr = getOption(start, days);
                    }

                };


            tempArr = getOption(thisYears, thisYears + 10);

            $year.html(tempArr.join('')).on('change', function () {
                if ($year.val() == thisYears) {
                    $month.html(currentYearMonths);
                } else {
                    tempArr = getOption(1, 12);
                    $month.html(tempArr.join(''));
                    tempArr = [];
                }
                $month.trigger('change');

            });
            tempArr = [];

            tempArr = getOption(thisMonth, 12);

            currentYearMonths = tempArr.join('');
            $month.html(tempArr.join('')).off().on('change', function () {
                var selectMonth = $month.val() * 1;
                if (selectMonth == thisMonth && $year.val() == thisYears) {
                    $day.html(currentMonthDays);
                } else {
                    getDaysByMonth(selectMonth);
                    $day.html(tempArr.join(''));
                    tempArr = [];
                }
            });
            tempArr = [];


            getDaysByMonth(thisMonth, thisDay);
            currentMonthDays = tempArr.join('');
            $day.html(tempArr.join(''));
            tempArr = [];

            if (dateArray ) {
                var dateArr = dateArray.split('-');

                console.log(dateArray);
                $year.find('option[value=' + dateArr[0] + ']').prop('selected', true);
                $month.find('option[value=' + dateArr[1] +']').prop('selected', true);
                $day.find('option[value=' + dateArr[2] + ']').prop('selected', true);
            }

            return function () {
                return $year.val() + '-' + $month.val() + '-' + $day.val();
            }
        }
    };

    DreamDate.fn.init.prototype = DreamDate.prototype;
}) (window);